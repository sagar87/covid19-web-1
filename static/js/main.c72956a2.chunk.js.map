{"version":3,"sources":["components/Spinner.jsx","components/Chloropleth.jsx","utils/loadTiles.js","components/LineChart2.jsx","components/LocalIncidence.jsx","entities/LegendItem.js","entities/LegendItems.js","components/Covid19.jsx","utils/loadData.js","components/NavBar.jsx","App.js","reportWebVitals.js","index.js"],"names":["Spinner","style","display","justifyContent","alignItems","height","className","role","MapUpdater","date","indexed_by_date","scale","data","map_loaded","console","log","map","useMap","i","window","_layers","layer","setStyle","feature","item","properties","lad18cd","fillColor","mean","Chloropleth","state","whenReady","setState","nextProps","nextState","dmin","dmax","this","props","tiles","handleOnClick","min_val","max_val","chroma","domain","onEachLad","lad","a","name","lad18nm","code","bindPopup","on","click","e","MapContainer","zoom","center","GeoJSON","weight","color","fillOpacity","onEachFeature","eventHandlers","add","items","push","backgroundColor","Math","ceil","createColorBar","React","Component","LineChart2","x","y","upper","lower","upper1","y1","lower1","key","labels","datasets","label","fill","lineTension","borderColor","borderWidth","pointRadius","type","tension","options","animation","duration","title","text","fontSize","maintainAspectRatio","annotation","annotations","drawTime","id","mode","scaleID","value","legend","position","plugins","ChartAnnotation","LocalIncidence","lad_data","filter","location","parameter","moment","format","LegendItem","isFor","textColor","cases","Covid19","dates","unique_dates","Set","filtered_data","meanArray","min","max","loadData","LALookupTable","lookup_table","features","getLALookupTable","useState","setTiles","setLad","setDate","requestLad","useEffect","length","Fragment","onChange","set_to","NavBar","collapsed","handleToggle","classTwo","to","onClick","data-toggle","data-target","aria-controls","aria-expanded","aria-label","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c72956a2.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Spinner = () => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"100vh\",\n      }}\n    >\n      <div className=\"spinner-border text-secondary\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Spinner;\n","import React, { useEffect, useState } from \"react\";\nimport { MapContainer, GeoJSON ,useMap} from \"react-leaflet\";\n\nimport \"leaflet/dist/leaflet.css\";\nimport chroma from \"chroma-js\";\nimport \"./Chloropleth.css\";\nimport { loadTiles, colorTile, getColorScale } from \"../utils/loadTiles\";\nimport { kMaxLength } from \"buffer\";\n\n\n\nconst MapUpdater = ({ date,indexed_by_date,data,scale,map_loaded }) => {\n  console.log(\"updating\")\n  const map = useMap()\n \n  window.map =map\n  for(var i in map._layers){\n    \n    const layer = map._layers[i]\n    if(layer.setStyle && layer.feature){\n\n    const item = indexed_by_date[date][layer.feature.properties.lad18cd] ;\n    \n    const fillColor =\n      typeof item !== \"undefined\" ? scale(item.mean) : \"#ffffff\";\n    layer.setStyle({'fillColor':fillColor})\n    }\n  }\n  return(\n    <div >{date}</div>\n  )\n}\n\n\n\nclass Chloropleth extends React.Component {\n\n  state = {\n    map_loaded: false\n  }\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n    \n    // TODO: return false and manually update map for updates\n    return true;\n}\n\nwhenReady = () => {\n  this.setState({map_loaded:true});\n  console.log(\"mount\")\n}\n\n\nrender(){\n  const { tiles, data,indexed_by_date,date, handleOnClick, min_val,max_val } = this.props;\n\n\n  \n  \n  const scale = getColorScale(min_val,max_val)\n\n  const mapStyle = {\n    fillColor: \"white\",\n    weight: 1,\n    color: \"black\",\n    fillOpacity: 1,\n  };\n\n  const createColorBar = (dmin,dmax, scale) => {\n\n    const items = [];\n    for (let i = 0; i <= 100; i++) {\n      items.push(\n        <span\n          key={`${i}`}\n          className=\"grad-step\"\n          style={{ backgroundColor: scale(dmin + (i / 100) * (dmax - dmin)) }}\n        ></span>\n      );\n    }\n    items.push(\n      <span key=\"domain-min\" className=\"domain-min\">\n        {Math.ceil(dmin)}\n      </span>\n    );\n    items.push(\n      <span key=\"domain-med\" className=\"domain-med\">\n        {Math.ceil((dmin + dmax) * 0.5)}\n      </span>\n    );\n    items.push(\n      <span key=\"domain-max\" className=\"domain-max\">\n        {Math.ceil(dmax)}\n      </span>\n    );\n\n    return <div>{items}</div>;\n  };\n\n  const colorScale = async (data, item , min, max) => {\n    const meanArray = data.map((item) => item.mean);\n    const scale = chroma\n      .scale(\"OrRd\")\n      .domain([Math.min(...meanArray), Math.max(...meanArray)]);\n    return scale(item.mean).hex();\n  };\n\n  const onEachLad = async (lad, layer) => {\n    const name = lad.properties.lad18nm;\n    const code = lad.properties.lad18cd;\n\n    // layer.options.fillColor =\n    //   typeof item !== \"undefined\" ? await colorScale(data, item) : \"#ffffff\";\n    \n    layer.bindPopup(`${name} (${code})`);\n    layer.on({\n      click: (e) => handleOnClick(e, code),\n    });\n  };\n\n  return (\n    <div>\n      <MapContainer style={{ height: \"60vh\" }} zoom={6} center={[55.5, -3]}>\n       \n          <GeoJSON  whenReady={this.whenReady} style={mapStyle} data={tiles}  onEachFeature={onEachLad} eventHandlers={{\n    add:this.whenReady\n  }}/>\n          <MapUpdater date={date} indexed_by_date={indexed_by_date} data={data} scale={scale} map_loaded={this.state.map_loaded} />\n      </MapContainer>\n      <div className=\"gradient\">\n        <center> {createColorBar(min_val,max_val, scale)}</center>\n      </div>\n    </div>\n  );\n\n        }\n};\n\nexport default Chloropleth;\n","import { features } from \"../assets/unitedKingdom.json\"\nimport chroma from \"chroma-js\"\n\n\nfunction getColorScale(dmin,dmax) {\n\n    //console.log(\"chroma\", dmin, dmax)\n    const scale = chroma.scale(\"OrRd\").domain([dmin, dmax]);\n    return scale\n}\n\nfunction colorTile(min, max) {\n    const scale = chroma.scale([\"yellow\", \"008ae5\"]).domain([min, max]);\n    return scale\n}\n\nfunction loadTiles() {\n    return features\n}\n\n\nfunction getLALookupTable() {\n    let lookup_table = {};\n    \n    features.map((item)=>{\n   \n        lookup_table[item.properties.lad18cd] = item.properties.lad18nm\n    })\n    return(lookup_table)\n}\n\n\nexport {colorTile, loadTiles, getColorScale, getLALookupTable}\n","import React, { useState } from \"react\";\n\n\nimport { Line } from \"react-chartjs-2\";\n\nimport Chart from 'chart.js';\nimport * as ChartAnnotation from 'chartjs-plugin-annotation';\n\nimport moment from \"moment\";\n\n\n\nconst LineChart2 = ({ x, y, upper, lower, y1, upper1, lower1,date }) => {\n\n  const key = date;\n  const state = {\n    labels: x,\n    datasets: [\n      {\n        label: \"Predicted incidence\",\n        fill: false,\n        lineTension: 0.5,\n        backgroundColor: \"rgba(236, 236, 236, 1)\",\n        borderColor: \"#rgba(236, 236, 236, 1)\",\n        borderWidth: 0,\n        data: upper,\n        pointRadius: 0,\n      },\n      {\n        // label: \"BandTop\",\n        type: \"line\",\n        backgroundColor: \"rgba(236, 236, 236, .4)\",\n        borderColor: \"transparent\",\n        pointRadius: 0,\n        fill: 0,\n        tension: 0,\n        data: upper1,\n        // yAxisID: \"y\",\n        // xAxisID: \"x\",\n      },\n      {\n        // label: \"BandBottom\",\n        type: \"line\",\n        backgroundColor: \"rgba(236, 236, 236, .4)\",\n        borderColor: \"transparent\",\n        pointRadius: 0,\n        fill: 0,\n        tension: 0,\n        data: lower,\n        // yAxisID: \"y\",\n        // xAxisID: \"x\",\n      },\n\n      {\n        label: \"Predicted incidence\",\n        fill: false,\n        lineTension: 0.5,\n        backgroundColor: \"rgba(236, 236, 236, 1)\",\n        borderColor: \"#rgba(236, 236, 236, 1)\",\n        borderWidth: 0,\n        data: lower,\n        pointRadius: 0,\n      },\n      {\n        // label: \"BandTop\",\n        type: \"line\",\n        backgroundColor: \"rgba(236, 236, 236, .4)\",\n        borderColor: \"transparent\",\n        pointRadius: 0,\n        fill: 0,\n        tension: 0,\n        data: lower1,\n        // yAxisID: \"y\",\n        // xAxisID: \"x\",\n      },\n      {\n        // label: \"BandBottom\",\n        type: \"line\",\n        backgroundColor: \"rgba(236, 236, 236, .4)\",\n        borderColor: \"transparent\",\n        pointRadius: 0,\n        fill: 0,\n        tension: 0,\n        data: upper,\n        // yAxisID: \"y\",\n        // xAxisID: \"x\",\n      },\n\n      {\n        label: \"Predicted incidence\",\n        fill: false,\n        lineTension: 0.5,\n        backgroundColor: \"rgb(235, 122, 52, 1)\",\n        borderColor: \"#ffa500\",\n        borderWidth: 3,\n        data: y,\n        pointRadius: 0,\n      },\n      {\n        // label: \"BandTop\",\n        type: \"line\",\n        backgroundColor: \"rgb(235, 122, 52, 0.5)\",\n        borderColor: \"transparent\",\n        pointRadius: 0,\n        fill: 0,\n        tension: 0,\n        data: upper,\n        // yAxisID: \"y\",\n        // xAxisID: \"x\",\n      },\n      {\n        // label: \"BandBottom\",\n        type: \"line\",\n        backgroundColor: \"rgb(235, 122, 52, 0.5)\",\n        borderColor: \"transparent\",\n        pointRadius: 0,\n        fill: 0,\n        tension: 0,\n        data: lower,\n        // yAxisID: \"y\",\n        // xAxisID: \"x\",\n      },\n    ],\n  };\n\nconsole.log(date)\n\n  const options = {\n    animation: {\n      duration: 0\n  },\n    title: {\n      display: true,\n      text: \"Daily incidence\",\n      fontSize: 14,\n      maintainAspectRatio: false,\n    },\n      annotation: {\n        annotations: [\n          {\n            drawTime: \"afterDatasetsDraw\",\n            id: \"hline\",\n            type: \"line\",\n            mode: \"vertical\",\n            scaleID: \"x-axis-0\",\n            value: date,\n            borderColor: \"black\",\n            borderWidth: 1,\n            /*label: {\n              backgroundColor: \"gray\",\n              content: date,\n              enabled: true\n            }*/\n          }\n        ]\n      }\n    \n   \n    ,\n    legend: {\n      display: false,\n      position: \"bottom\",\n    },\n  }\n  console.log(options)\n\n\n\n  return (\n    <Line  plugins={[ChartAnnotation]}\n      data={state}\n      options={options}\n      key={key}\n    />\n  );\n};\n\nexport default LineChart2;\n","import React from \"react\";\n\nimport LineChart2 from \"./LineChart2\";\n\nimport moment from \"moment\";\nfunction LocalIncidence({data,lad,date,name}) {\n\n    const lad_data = data.filter((item) => item.location == lad)\n    return(<div>\n        <h2>Local incidences {date}</h2>\n            <p className=\"lead\">Local Authority: {name}</p>\n            {/* {lad.data && (\n              <LineChart\n                x={lad.data\n                  .filter((item) => item.parameter === \"lambda\")\n                  .map((item) => moment(item.date).format(\"YYYY-MM-DD\"))}\n                y={lad.data\n                  .filter((item) => item.parameter === \"lambda\")\n                  .map((item) => item.mean)}\n                upper={lad.data\n                  .filter((item) => item.parameter === \"lambda\")\n                  .map((item) => item.upper)}\n                lower={lad.data\n                  .filter((item) => item.parameter === \"lambda\")\n                  .map((item) => item.lower)}\n              />\n            )} */}\n           \n              <LineChart2\n              date = {date}\n                x={lad_data\n                  .filter((item) => item.parameter === \"yhat\")\n                  .map((item) => moment(item.date).format(\"YYYY-MM-DD\"))}\n                y={lad_data\n                  .filter((item) => item.parameter === \"lambda\")\n                  .map((item) => item.mean)}\n                upper={lad_data\n                  .filter((item) => item.parameter === \"lambda\")\n                  .map((item) => item.upper)}\n                lower={lad_data\n                  .filter((item) => item.parameter === \"lambda\")\n                  .map((item) => item.lower)}\n                y1={lad_data\n                  .filter((item) => item.parameter === \"yhat\")\n                  .map((item) => item.mean)}\n                upper1={lad_data\n                  .filter((item) => item.parameter === \"yhat\")\n                  .map((item) => item.upper)}\n                lower1={lad_data\n                  .filter((item) => item.parameter === \"yhat\")\n                  .map((item) => item.lower)}\n              />\n            \n            </div>\n    );\n  }\n\n\n  export default LocalIncidence;\n","class LegendItem {\n  constructor(title, color, isFor, textColor) {\n    this.title = title;\n    this.color = color;\n    this.isFor = isFor;\n    this.textColor = textColor === null ? \"black\" : textColor;\n  }\n}\n\nexport default LegendItem;\n","import LegendItem from \"./LegendItem\";\n\nconst legendItems = [\n  new LegendItem(\"> 50\", \"#741f1f\", (cases) => cases >= 50, \"white\"),\n  new LegendItem(\n    \"40 - 50\",\n    \"#741f1f\",\n    (cases) => cases >= 40 && cases <= 50,\n    \"white\"\n  ),\n  new LegendItem(\n    \"30 - 40\",\n    \"#9c2929\",\n    (cases) => cases >= 30 && cases <= 40,\n    \"white\"\n  ),\n  new LegendItem(\n    \"20 - 30\",\n    \"#741f1f\",\n    (cases) => cases >= 20 && cases <= 30,\n    \"white\"\n  ),\n  new LegendItem(\n    \"10 - 20\",\n    \"#c57f7f\",\n    (cases) => cases >= 10 && cases <= 20,\n    \"white\"\n  ),\n  new LegendItem(\n    \"0 - 10\",\n    \"#d8aaaa\",\n    (cases) => cases >= 0 && cases <= 10,\n    \"white\"\n  ),\n  new LegendItem(\"NA\", \"#ffffff\", (cases) => true, \"white\"),\n];\n\nexport default legendItems;\n","import React, { useState, useEffect } from \"react\";\nimport Spinner from \"./Spinner\";\nimport Chloropleth from \"./Chloropleth\";\nimport LocalIncidence from \"./LocalIncidence\";\n\nimport Slider from \"rc-slider\";\n\nimport moment from \"moment\";\nimport \"rc-slider/assets/index.css\";\n\nimport legendItems from \"../entities/LegendItems\";\nimport { loadTiles, getLALookupTable } from \"../utils/loadTiles\";\nimport { loadData } from \"../utils/loadData\";\n\nconst Covid19 = () => {\n  const [data,indexed_by_date,unique_dates,min_val,max_val] = loadData();\n  const LALookupTable = getLALookupTable()\n  const [tiles, setTiles] = useState([]);\n  const [lad, setLad] = useState({\n    lad: \"E08000006\",\n    data: null,\n    scale: null,\n  });\n  const [date, setDate] = useState({\n    date: \"2020-09-01\",\n    \n  });\n\n  const handleOnClick = (e, lad) => {\n    setLad({ ...lad, lad, data: null });\n  };\n\n  const handleDateSlider = (e) => {\n    const set_to = unique_dates[e];\n   //console.log(\"date set to \", set_to)\n    setDate({date: set_to});\n    \n    \n  };\n\n  const requestLad = async (lad) => {\n    //console.log(lad);\n  \n   // setLad({ ...lad, data });\n   // const range = data.map((item) => item.date);\n   // setDate({ ...date, range });\n  };\n\n  \n\n  useEffect(() => {\n    if (tiles.length === 0) setTiles(loadTiles());\n    if (lad.data === null) requestLad(lad);\n    // if (date.range === null) setDate({ ...date, range: getDates() });vo\n    // if ()\n  }, [lad, date]);\n\n  return (\n    <React.Fragment>\n      {tiles && tiles.length === 0 ? (\n        <div className=\"row\">\n          <Spinner />\n        </div>\n      ) : (\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <h2>Map</h2>\n            <Chloropleth\n              tiles={tiles}\n              max_val={max_val}\n              min_val={min_val}\n              indexed_by_date = {indexed_by_date}\n              date={date.date}\n              scale={date.scale}\n              handleOnClick={handleOnClick}\n            />\n          </div>\n          <div className=\"col-md-6\">\n            <h2>Select date</h2>\n            <p className=\"lead\">Current date: {date.date}</p>\n            <Slider\n              min={0}\n              max={unique_dates && unique_dates.length}\n              onChange={handleDateSlider}\n            />\n            <hr />\n\n            <LocalIncidence name={LALookupTable[lad.lad]} date={date.date} lad={lad.lad} data={data}/>\n            \n          </div>\n        </div>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default Covid19;\n","import { data } from \"../assets/data_full.json\"\n\nfunction loadData(){\n    const dates = data.map((item) => item.date)\n    const unique_dates = [...new Set(dates)]\n\n    let indexed_by_date = {};\n\n    const filtered_data = data.filter((item) => item.parameter === \"lambda\")\n\n    const meanArray = filtered_data.map((item) => item.mean);\n    const dmin = Math.min(...meanArray);\n    const dmax = Math.max(...meanArray);\n\n\n    filtered_data.map((item) => {\n      if (item.parameter == \"lambda\"){\n      if(indexed_by_date[item.date]){\n        indexed_by_date[item.date][item.location] = item\n      }\n      else{\n        indexed_by_date[item.date]={}\n        indexed_by_date[item.date][item.location] = item\n        \n      }\n    }\n    })\n    \n    return([data,indexed_by_date,unique_dates,dmin,dmax]);\n  }\n\n\nexport {loadData}","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nclass NavBar extends Component {\n  state = {\n    collapsed: true,\n  };\n  handleToggle = () => {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  };\n  render() {\n    const collapsed = this.state.collapsed;\n    const classOne = collapsed\n      ? \"collapse navbar-collapse\"\n      : \"collapse navbar-collapse show\";\n    const classTwo = collapsed\n      ? \"navbar-toggler navbar-toggler-right collapsed\"\n      : \"navbar-toggler navbar-toggler-right\";\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar bg-light transparent-nav\">\n        <div className=\"container\">\n          <NavLink className=\"navbar-brand\" to=\"/\">\n            CovInce\n          </NavLink>\n          <button\n            onClick={this.handleToggle}\n            className={`${classTwo}`}\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarResponsive\"\n            aria-controls=\"navbarResponsive\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\" />\n          </button>\n          {/* <div className={`${classOne}`} id=\"navbarResponsive\">\n            <ul className=\"navbar-nav ml-auto\">\n              <li className=\"nav-item\">\n                <NavLink className=\"nav-link\" to=\"/add-user\">\n                  Add User\n                </NavLink>\n              </li>\n              <li className=\"nav-item\">\n                <NavLink className=\"nav-link\" to=\"/user-list\">\n                  Userlist\n                </NavLink>\n              </li>\n              <li className=\"nav-item\">\n                <NavLink className=\"nav-link\" to=\"/status\">\n                  Status\n                </NavLink>\n              </li>\n              {!this.props.user && (\n                <li className=\"nav-item\">\n                  <NavLink className=\"nav-link\" to=\"/register\">\n                    Register\n                  </NavLink>\n                </li>\n              )}\n              {!this.props.user && (\n                <li className=\"nav-item\">\n                  <NavLink className=\"nav-link\" to=\"/login\">\n                    Login\n                  </NavLink>\n                </li>\n              )}\n              {this.props.user && (\n                <React.Fragment>\n                  <li className=\"nav-item\">\n                    <NavLink className=\"nav-link\" to=\"/profile\">\n                      {this.props.user.username}\n                    </NavLink>\n                  </li>\n                  <li className=\"nav-item\">\n                    <NavLink className=\"nav-link\" to=\"/logout\">\n                      Logout\n                    </NavLink>\n                  </li>\n                </React.Fragment>\n              )}\n            </ul>\n          </div> */}\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","import React from 'react';\nimport Covid19 from \"./components/Covid19\"\nimport NavBar from \"./components/NavBar\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <NavBar />\n    <div className=\"container\">\n      \n      <Covid19 />\n    </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}